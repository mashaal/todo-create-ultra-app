scalar Date

input CreateListInput {
  label: String!
}

input UpdateListInput {
  label: String!
}

type List {
  id: ID!
  label: String!
  todos: [Todo!]!
}

input CreateTodoInput {
  label: String!
  completed: Boolean!
  list: String
  project: String
  tags: [String!]
  priority: Priority
  description: String
  dueDate: Date
  startDate: Date
  endDate: Date
}

input UpdateTodoInput {
  id: ID!
  label: String!
  completed: Boolean!
  list: String
  project: String
  tags: [String!]
  priority: Priority
  description: String
  dueDate: Date
  startDate: Date
  endDate: Date
}

type Todo {
  id: ID!
  label: String!
  completed: Boolean!
  list: List
  project: Project
  tags: [Tag!]!
  priority: Priority
  description: String
  dueDate: Date
  startDate: Date
  endDate: Date
  createdAt: Date
  updatedAt: Date
}

input CreateProjectInput {
  label: String!
}

input UpdateProjectInput {
  id: ID!
  label: String!
}

type Project {
  id: ID!
  label: String!
  todos: [Todo!]!
}

input CreateTagInput {
  label: String!
}

input UpdateTagInput {
  id: ID!
  label: String!
}

type Tag {
  id: ID!
  label: String!
  todos: [Todo!]!
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Frequency {
  HOURS
  DAYS
  WEEKS
  MONTHS
  YEARS
}

type Query {
  findAllLists: [List!]!
  findListById(id: ID!): List
  findListByLabel(label: String!): List

  findAllProjects: [Project!]!
  findProjectById(id: ID!): Project
  findProjectByLabel(label: String!): Project

  findAllTags: [Tag!]!
  findTagById(id: ID!): Tag
  findTagByLabel(label: String!): Tag

  findAllTodos: [Todo!]!
  findTodosByList(listLabel: String!): [Todo!]!
  findTodosByProject(projectLabel: String!): [Todo!]!
  findTodosByTags(tagLabels: [String!]!): [Todo!]!
  findTodoById(id: ID!): Todo
  findTodoByLabel(label: String!): Todo
}

type Mutation {
  createList(data: CreateListInput!): List!
  updateList(id: ID!, data: UpdateListInput!): List!
  removeList(id: ID!): List!

  createProject(data: CreateProjectInput!): Project!
  updateProject(id: ID!, data: UpdateProjectInput!): Project!
  removeProject(id: ID!): Project!

  createTag(data: CreateTagInput!): Tag!
  updateTag(id: ID!, data: UpdateTagInput!): Tag!
  removeTag(id: ID!): Tag!

  createTodo(data: CreateTodoInput!): Todo!
  updateTodo(id: ID!, data: UpdateTodoInput!): Todo!
  removeTodo(id: ID!): Todo!
}